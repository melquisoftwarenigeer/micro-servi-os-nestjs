services:
  # Servi√ßo de autentica√ß√£o (Auth API)
  auth:
    # build: ./auth
    image: melquidocker/micro-servico-nest:auth-v1.3.0
    container_name: auth-service
    ports:
      - '3001:3000'  # Porta externa:interna (ex: localhost:3001)
    depends_on:
      - auth-db  # Aguarda o banco ficar dispon√≠vel antes de subir
    environment:
      - DATABASE_URL=${AUTH_DATABASE_URL}
      - AUTH_PORT=3000

  # Banco de dados para o servi√ßo de autentica√ß√£o
  auth-db:
    image: postgres:15
    restart: always  # Reinicia automaticamente se falhar
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_DB_NAME}
    ports:
      - '5433:5432'  # Porta externa para acessar o banco localmente
    volumes:
      - auth-db-data:/var/lib/postgresql/data  # Persist√™ncia dos dados

  # Servi√ßo de gerenciamento de projetos
  projects:
    # build: ./projects
    image: melquidocker/micro-servico-nest:projects-v1.3.0
    container_name: projects-service
    ports:
      - '3002:3000'
    depends_on:
      - projects-db
      - auth
    environment:
      - DATABASE_URL=${PROJECTS_DATABASE_URL}
      - AUTH_URL=http://auth:3000  # üëà Adiciona essa linha!
      - PROJECTS_PORT=3000

  # Banco de dados para o servi√ßo de projetos
  projects-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${PROJECTS_DB_USER} 
      POSTGRES_PASSWORD: ${PROJECTS_DB_PASSWORD}
      POSTGRES_DB: ${PROJECTS_DB_NAME}
    ports:
      - '5434:5432'
    volumes:
      - projects-db-data:/var/lib/postgresql/data

# Volumes nomeados para persistir dados do banco mesmo ap√≥s reiniciar ou remover containers
volumes:
  auth-db-data:
  projects-db-data:
